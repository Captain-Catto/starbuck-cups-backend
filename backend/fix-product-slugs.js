/**
 * Script to fix Vietnamese product slugs
 * Run with: node fix-product-slugs.js
 */

const { PrismaClient } = require('./src/generated/prisma');

// Vietnamese diacritics mapping
const removeVietnameseDiacritics = (str) => {
  const vietnameseMap = {
    '√°': 'a', '√†': 'a', '·∫£': 'a', '√£': 'a', '·∫°': 'a',
    'ƒÉ': 'a', '·∫Ø': 'a', '·∫±': 'a', '·∫≥': 'a', '·∫µ': 'a', '·∫∑': 'a',
    '√¢': 'a', '·∫•': 'a', '·∫ß': 'a', '·∫©': 'a', '·∫´': 'a', '·∫≠': 'a',
    '√©': 'e', '√®': 'e', '·∫ª': 'e', '·∫Ω': 'e', '·∫π': 'e',
    '√™': 'e', '·∫ø': 'e', '·ªÅ': 'e', '·ªÉ': 'e', '·ªÖ': 'e', '·ªá': 'e',
    '√≠': 'i', '√¨': 'i', '·ªâ': 'i', 'ƒ©': 'i', '·ªã': 'i',
    '√≥': 'o', '√≤': 'o', '·ªè': 'o', '√µ': 'o', '·ªç': 'o',
    '√¥': 'o', '·ªë': 'o', '·ªì': 'o', '·ªï': 'o', '·ªó': 'o', '·ªô': 'o',
    '∆°': 'o', '·ªõ': 'o', '·ªù': 'o', '·ªü': 'o', '·ª°': 'o', '·ª£': 'o',
    '√∫': 'u', '√π': 'u', '·ªß': 'u', '≈©': 'u', '·ª•': 'u',
    '∆∞': 'u', '·ª©': 'u', '·ª´': 'u', '·ª≠': 'u', '·ªØ': 'u', '·ª±': 'u',
    '√Ω': 'y', '·ª≥': 'y', '·ª∑': 'y', '·ªπ': 'y', '·ªµ': 'y',
    'ƒë': 'd',
    '√Å': 'A', '√Ä': 'A', '·∫¢': 'A', '√É': 'A', '·∫†': 'A',
    'ƒÇ': 'A', '·∫Æ': 'A', '·∫∞': 'A', '·∫≤': 'A', '·∫¥': 'A', '·∫∂': 'A',
    '√Ç': 'A', '·∫§': 'A', '·∫¶': 'A', '·∫®': 'A', '·∫™': 'A', '·∫¨': 'A',
    '√â': 'E', '√à': 'E', '·∫∫': 'E', '·∫º': 'E', '·∫∏': 'E',
    '√ä': 'E', '·∫æ': 'E', '·ªÄ': 'E', '·ªÇ': 'E', '·ªÑ': 'E', '·ªÜ': 'E',
    '√ç': 'I', '√å': 'I', '·ªà': 'I', 'ƒ®': 'I', '·ªä': 'I',
    '√ì': 'O', '√í': 'O', '·ªé': 'O', '√ï': 'O', '·ªå': 'O',
    '√î': 'O', '·ªê': 'O', '·ªí': 'O', '·ªî': 'O', '·ªñ': 'O', '·ªò': 'O',
    '∆†': 'O', '·ªö': 'O', '·ªú': 'O', '·ªû': 'O', '·ª†': 'O', '·ª¢': 'O',
    '√ö': 'U', '√ô': 'U', '·ª¶': 'U', '≈®': 'U', '·ª§': 'U',
    '∆Ø': 'U', '·ª®': 'U', '·ª™': 'U', '·ª¨': 'U', '·ªÆ': 'U', '·ª∞': 'U',
    '√ù': 'Y', '·ª≤': 'Y', '·ª∂': 'Y', '·ª∏': 'Y', '·ª¥': 'Y',
    'ƒê': 'D'
  };

  return str.replace(/[√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë√Å√Ä·∫¢√É·∫†ƒÇ·∫Æ·∫∞·∫≤·∫¥·∫∂√Ç·∫§·∫¶·∫®·∫™·∫¨√â√à·∫∫·∫º·∫∏√ä·∫æ·ªÄ·ªÇ·ªÑ·ªÜ√ç√å·ªàƒ®·ªä√ì√í·ªé√ï·ªå√î·ªê·ªí·ªî·ªñ·ªò∆†·ªö·ªú·ªû·ª†·ª¢√ö√ô·ª¶≈®·ª§∆Ø·ª®·ª™·ª¨·ªÆ·ª∞√ù·ª≤·ª∂·ª∏·ª¥ƒê]/g, (match) => vietnameseMap[match] || match);
};

// Generate SEO-friendly slug with Vietnamese support
const generateVietnameseSlug = (name) => {
  return removeVietnameseDiacritics(name)
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, "")
    .replace(/[\s_-]+/g, "-")
    .replace(/^-+|-+$/g, "");
};

const prisma = new PrismaClient();

async function fixProductSlugs() {
  try {
    console.log('üîß Starting Vietnamese slug fix...');

    // Get products with their capacity and colors
    const products = await prisma.product.findMany({
      include: {
        capacity: true,
        productColors: {
          include: {
            color: true
          }
        }
      }
    });

    console.log(`üì¶ Found ${products.length} products to check`);

    let updatedCount = 0;

    for (const product of products) {
      if (product.productColors.length === 0) {
        console.log(`‚ö†Ô∏è Skipping product ${product.name} - no colors found`);
        continue;
      }

      const colorName = product.productColors[0].color.name;
      const capacityName = product.capacity.name;

      // Generate new correct slug
      const newSlug = generateVietnameseSlug(`${product.name} ${colorName} ${capacityName}`);

      if (newSlug !== product.slug) {
        console.log(`üîÑ Updating: "${product.name}"`);
        console.log(`   Old slug: ${product.slug}`);
        console.log(`   New slug: ${newSlug}`);

        // Check if new slug already exists
        const existing = await prisma.product.findUnique({
          where: { slug: newSlug }
        });

        if (existing && existing.id !== product.id) {
          // Add counter if slug exists
          let counter = 1;
          let finalSlug = `${newSlug}-${counter}`;
          while (await prisma.product.findUnique({ where: { slug: finalSlug } })) {
            counter++;
            finalSlug = `${newSlug}-${counter}`;
          }

          await prisma.product.update({
            where: { id: product.id },
            data: { slug: finalSlug }
          });

          console.log(`   ‚úÖ Updated to: ${finalSlug} (with counter)`);
        } else {
          await prisma.product.update({
            where: { id: product.id },
            data: { slug: newSlug }
          });

          console.log(`   ‚úÖ Updated to: ${newSlug}`);
        }

        updatedCount++;
      } else {
        console.log(`‚úÖ "${product.name}" - slug already correct`);
      }
    }

    console.log(`\nüéâ Slug fix completed!`);
    console.log(`üìä Updated ${updatedCount} out of ${products.length} products`);

  } catch (error) {
    console.error('‚ùå Error fixing slugs:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the fix
fixProductSlugs();