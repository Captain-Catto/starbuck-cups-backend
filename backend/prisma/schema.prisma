generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id                String     @id @default(uuid()) @db.Uuid
  username          String     @unique @db.VarChar(50)
  passwordHash      String     @map("password_hash") @db.VarChar(255)
  email             String     @unique @db.VarChar(255)
  role              AdminRole  @default(STAFF)
  isActive          Boolean    @default(true) @map("is_active")
  lastLoginAt       DateTime?  @map("last_login_at")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  createdCapacities Capacity[] @relation("AdminCreatedCapacities")
  createdCategories Category[] @relation("AdminCreatedCategories")
  createdColors     Color[]     @relation("AdminCreatedColors")
  createdCustomers  Customer[]  @relation("AdminCreatedCustomers")
  deletedProducts   Product[]   @relation("AdminDeletedProducts")
  createdHeroImages HeroImage[] @relation("AdminCreatedHeroImages")

  @@map("admin_users")
}

model Customer {
  id               String            @id @default(uuid()) @db.Uuid
  messengerId      String?           @map("messenger_id") @db.VarChar(100)
  zaloId           String?           @map("zalo_id") @db.VarChar(100)
  fullName         String            @map("full_name") @db.VarChar(200)
  phone            String            @db.VarChar(20)
  notes            String?
  isVip            Boolean           @default(false) @map("is_vip")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  createdByAdminId String            @map("created_by_admin_id") @db.Uuid
  addresses        CustomerAddress[]
  createdByAdmin   AdminUser         @relation("AdminCreatedCustomers", fields: [createdByAdminId], references: [id])
  orders           Order[]

  @@map("customers")
}

model CustomerAddress {
  id          String   @id @default(uuid()) @db.Uuid
  customerId  String   @map("customer_id") @db.Uuid
  addressLine String   @map("address_line") @db.VarChar(500)
  ward        String?  @db.VarChar(100)
  district    String?  @db.VarChar(100)
  city        String   @db.VarChar(100)
  postalCode  String?  @map("postal_code") @db.VarChar(20)
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_addresses")
}

model Color {
  id               String         @id @default(uuid()) @db.Uuid
  name             String         @db.VarChar(100)
  slug             String         @unique @db.VarChar(150)
  hexCode          String         @map("hex_code") @db.VarChar(7)
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  createdByAdminId String         @map("created_by_admin_id") @db.Uuid
  createdByAdmin   AdminUser      @relation("AdminCreatedColors", fields: [createdByAdminId], references: [id])
  productColors    ProductColor[]

  @@map("colors")
}

model Capacity {
  id               String    @id @default(uuid()) @db.Uuid
  name             String    @db.VarChar(100)
  slug             String    @unique @db.VarChar(150)
  volumeMl         Int       @map("volume_ml")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  createdByAdminId String    @map("created_by_admin_id") @db.Uuid
  createdByAdmin   AdminUser @relation("AdminCreatedCapacities", fields: [createdByAdminId], references: [id])
  products         Product[]

  @@map("capacities")
}

model Category {
  id                String            @id @default(uuid()) @db.Uuid
  name              String            @db.VarChar(200)
  slug              String            @unique @db.VarChar(300)
  description       String?
  parentId          String?           @map("parent_id") @db.Uuid
  isActive          Boolean           @default(true) @map("is_active")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  createdByAdminId  String            @map("created_by_admin_id") @db.Uuid
  createdByAdmin    AdminUser         @relation("AdminCreatedCategories", fields: [createdByAdminId], references: [id])
  parent            Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]        @relation("CategoryHierarchy")
  productCategories ProductCategory[]

  @@map("categories")
}

model Product {
  id                String             @id @default(uuid()) @db.Uuid
  slug              String             @unique @db.VarChar(300)
  name              String             @db.VarChar(255)
  description       String?
  capacityId        String             @map("capacity_id") @db.Uuid
  stockQuantity     Int                @default(0) @map("stock_quantity")
  productUrl        String?            @map("product_url") @db.VarChar(500)
  isActive          Boolean            @default(true) @map("is_active")
  isDeleted         Boolean            @default(false) @map("is_deleted")
  deletedAt         DateTime?          @map("deleted_at")
  deletedByAdminId  String?            @map("deleted_by_admin_id") @db.Uuid
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  unitPrice         Decimal            @default(0) @map("unit_price") @db.Decimal(10, 2)
  consultationItems ConsultationItem[]
  orderItems        OrderItem[]
  productImages     ProductImage[]
  productCategories ProductCategory[]
  productColors     ProductColor[]
  capacity          Capacity           @relation(fields: [capacityId], references: [id])
  deletedByAdmin    AdminUser?         @relation("AdminDeletedProducts", fields: [deletedByAdminId], references: [id])

  @@map("products")
}

model ProductCategory {
  id         String   @id @default(uuid()) @db.Uuid
  productId  String   @map("product_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model ProductColor {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  colorId   String   @map("color_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  color     Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)

  @@unique([productId, colorId])
  @@map("product_colors")
}

model ProductImage {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  url       String   @db.VarChar(1000)
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, order])
  @@map("product_images")
}

model Order {
  id                   String      @id @default(uuid()) @db.Uuid
  orderNumber          String      @unique @map("order_number") @db.VarChar(20)
  customerId           String      @map("customer_id") @db.Uuid
  orderType            OrderType   @map("order_type")
  status               OrderStatus @default(PENDING)
  totalAmount          Decimal     @default(0) @map("total_amount") @db.Decimal(10, 2)
  shippingCost         Decimal     @default(0) @map("shipping_cost") @db.Decimal(8, 2)
  customDescription    String?     @map("custom_description")
  notes                String?
  createdAt            DateTime    @default(now()) @map("created_at")
  updatedAt            DateTime    @updatedAt @map("updated_at")
  confirmedAt          DateTime?   @map("confirmed_at")
  completedAt          DateTime?   @map("completed_at")
  deliveryAddress      Json?       @map("delivery_address")
  originalShippingCost Decimal     @default(0) @map("original_shipping_cost") @db.Decimal(8, 2)
  shippingDiscount     Decimal     @default(0) @map("shipping_discount") @db.Decimal(8, 2)
  items                OrderItem[]
  customer             Customer    @relation(fields: [customerId], references: [id])

  @@map("orders")
}

model OrderItem {
  id              String   @id @default(uuid()) @db.Uuid
  orderId         String   @map("order_id") @db.Uuid
  productId       String   @map("product_id") @db.Uuid
  quantity        Int      @default(1)
  productSnapshot Json     @map("product_snapshot")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Consultation {
  id                String             @id @default(uuid()) @db.Uuid
  customerName      String             @map("customer_name") @db.VarChar(255)
  phoneNumber       String             @map("phone_number") @db.VarChar(50)
  address           String
  totalItems        Int                @map("total_items")
  status            ConsultationStatus @default(PENDING)
  notes             String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  consultationItems ConsultationItem[]

  @@map("consultations")
}

model ConsultationItem {
  id             String       @id @default(uuid()) @db.Uuid
  consultationId String       @map("consultation_id") @db.Uuid
  productId      String       @map("product_id") @db.Uuid
  productName    String       @map("product_name") @db.VarChar(255)
  quantity       Int
  color          String       @db.VarChar(100)
  capacity       String       @db.VarChar(100)
  category       String       @db.VarChar(100)
  createdAt      DateTime     @default(now()) @map("created_at")
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id])

  @@map("consultation_items")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  STAFF
}

enum OrderType {
  CUSTOM
  PRODUCT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ConsultationStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model HeroImage {
  id               String    @id @default(uuid()) @db.Uuid
  title            String    @db.VarChar(255)
  imageUrl         String    @map("image_url") @db.VarChar(1000)
  altText          String    @map("alt_text") @db.VarChar(255)
  order            Int       @default(0)
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  createdByAdminId String    @map("created_by_admin_id") @db.Uuid
  createdByAdmin   AdminUser @relation("AdminCreatedHeroImages", fields: [createdByAdminId], references: [id])

  @@map("hero_images")
}
